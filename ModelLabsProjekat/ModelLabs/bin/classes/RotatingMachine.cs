//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN {
    using System;
    using FTN;
    
    
    /// A rotating machine which may be used as a generator or motor.
    public class RotatingMachine : RegulatingCondEq {
        
        /// Damping torque coefficient, a proportionality constant that, when multiplied by the angular velocity of the rotor poles with respect to the magnetic field (frequency), results in the damping torque.  This value is often zero when the sources of damping torques (generator damper windings, load damping effects, etc.) are modeled in detail.
        private System.Single? cim_damping;
        
        private const bool isDampingMandatory = false;
        
        private const string _dampingPrefix = "cim";
        
        /// Inertia constant of generator or motor and mechanical load.  Must be greater than zero.  This is the specification for the stored energy in the rotating mass when operating at rated speed. For a generator, this includes the generator plus all other elements (turbine, exciter) on the same shaft and has units of MW-sec. For a motor, it includes the motor plus its mechanical load. Conventional units are per unit on the generator MVA base, usually expressed as MW-second./MVA or just second.   This value is used in the accelerating power reference frame for  operator training simulator solutions.
        private System.Single? cim_inertia;
        
        private const bool isInertiaMandatory = false;
        
        private const string _inertiaPrefix = "cim";
        
        /// Nameplate apparent power rating for the unit.
        private System.Single? cim_ratedS;
        
        private const bool isRatedSMandatory = false;
        
        private const string _ratedSPrefix = "cim";
        
        /// Saturation factor at rated terminal voltage.  Should be greather than or equal to zero.
        private System.Single? cim_saturationFactor;
        
        private const bool isSaturationFactorMandatory = false;
        
        private const string _saturationFactorPrefix = "cim";
        
        /// Saturation factor at 120% of rated terminal voltage.  Should be greater than or equal to the saturation factor at rated terminal voltage.
        private System.Single? cim_saturationFactor120;
        
        private const bool isSaturationFactor120Mandatory = false;
        
        private const string _saturationFactor120Prefix = "cim";
        
        /// Stator leakage reactance.  Should be greater than or equal to 0.
        private System.Single? cim_statorLeakageReactance;
        
        private const bool isStatorLeakageReactanceMandatory = false;
        
        private const string _statorLeakageReactancePrefix = "cim";
        
        /// Stator (armature) resistance.  Should be greather than or equal to zero.   Equivalent resistance when used for GenEquiv model.
        private System.Single? cim_statorResistance;
        
        private const bool isStatorResistanceMandatory = false;
        
        private const string _statorResistancePrefix = "cim";
        
        public virtual float Damping {
            get {
                return this.cim_damping.GetValueOrDefault();
            }
            set {
                this.cim_damping = value;
            }
        }
        
        public virtual bool DampingHasValue {
            get {
                return this.cim_damping != null;
            }
        }
        
        public static bool IsDampingMandatory {
            get {
                return isDampingMandatory;
            }
        }
        
        public static string DampingPrefix {
            get {
                return _dampingPrefix;
            }
        }
        
        public virtual float Inertia {
            get {
                return this.cim_inertia.GetValueOrDefault();
            }
            set {
                this.cim_inertia = value;
            }
        }
        
        public virtual bool InertiaHasValue {
            get {
                return this.cim_inertia != null;
            }
        }
        
        public static bool IsInertiaMandatory {
            get {
                return isInertiaMandatory;
            }
        }
        
        public static string InertiaPrefix {
            get {
                return _inertiaPrefix;
            }
        }
        
        public virtual float RatedS {
            get {
                return this.cim_ratedS.GetValueOrDefault();
            }
            set {
                this.cim_ratedS = value;
            }
        }
        
        public virtual bool RatedSHasValue {
            get {
                return this.cim_ratedS != null;
            }
        }
        
        public static bool IsRatedSMandatory {
            get {
                return isRatedSMandatory;
            }
        }
        
        public static string RatedSPrefix {
            get {
                return _ratedSPrefix;
            }
        }
        
        public virtual float SaturationFactor {
            get {
                return this.cim_saturationFactor.GetValueOrDefault();
            }
            set {
                this.cim_saturationFactor = value;
            }
        }
        
        public virtual bool SaturationFactorHasValue {
            get {
                return this.cim_saturationFactor != null;
            }
        }
        
        public static bool IsSaturationFactorMandatory {
            get {
                return isSaturationFactorMandatory;
            }
        }
        
        public static string SaturationFactorPrefix {
            get {
                return _saturationFactorPrefix;
            }
        }
        
        public virtual float SaturationFactor120 {
            get {
                return this.cim_saturationFactor120.GetValueOrDefault();
            }
            set {
                this.cim_saturationFactor120 = value;
            }
        }
        
        public virtual bool SaturationFactor120HasValue {
            get {
                return this.cim_saturationFactor120 != null;
            }
        }
        
        public static bool IsSaturationFactor120Mandatory {
            get {
                return isSaturationFactor120Mandatory;
            }
        }
        
        public static string SaturationFactor120Prefix {
            get {
                return _saturationFactor120Prefix;
            }
        }
        
        public virtual float StatorLeakageReactance {
            get {
                return this.cim_statorLeakageReactance.GetValueOrDefault();
            }
            set {
                this.cim_statorLeakageReactance = value;
            }
        }
        
        public virtual bool StatorLeakageReactanceHasValue {
            get {
                return this.cim_statorLeakageReactance != null;
            }
        }
        
        public static bool IsStatorLeakageReactanceMandatory {
            get {
                return isStatorLeakageReactanceMandatory;
            }
        }
        
        public static string StatorLeakageReactancePrefix {
            get {
                return _statorLeakageReactancePrefix;
            }
        }
        
        public virtual float StatorResistance {
            get {
                return this.cim_statorResistance.GetValueOrDefault();
            }
            set {
                this.cim_statorResistance = value;
            }
        }
        
        public virtual bool StatorResistanceHasValue {
            get {
                return this.cim_statorResistance != null;
            }
        }
        
        public static bool IsStatorResistanceMandatory {
            get {
                return isStatorResistanceMandatory;
            }
        }
        
        public static string StatorResistancePrefix {
            get {
                return _statorResistancePrefix;
            }
        }
    }
}
