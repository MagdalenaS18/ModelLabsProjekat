//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN {
    using System;
    using FTN;
    
    
    /// A rotating machine whose shaft rotates asynchronously with the electrical field.  Also known as an induction machine with no external connection to the rotor windings, e.g squirel-cage induction machine.
    public class AsynchronousMachine : RotatingMachine {
        
        /// Damper 1 winding resistance.
        private System.Single? cim_rr1;
        
        private const bool isRr1Mandatory = false;
        
        private const string _rr1Prefix = "cim";
        
        /// Damper 2 winding resistance.
        private System.Single? cim_rr2;
        
        private const bool isRr2Mandatory = false;
        
        private const string _rr2Prefix = "cim";
        
        /// Transient rotor time constant (greater than tppo).
        private System.Single? cim_tpo;
        
        private const bool isTpoMandatory = false;
        
        private const string _tpoPrefix = "cim";
        
        /// Sub-transient rotor time constant (greater than 0).
        private System.Single? cim_tppo;
        
        private const bool isTppoMandatory = false;
        
        private const string _tppoPrefix = "cim";
        
        /// Damper 1 winding leakage reactance.
        private System.Single? cim_xlr1;
        
        private const bool isXlr1Mandatory = false;
        
        private const string _xlr1Prefix = "cim";
        
        /// Damper 2 winding leakage reactance.
        private System.Single? cim_xlr2;
        
        private const bool isXlr2Mandatory = false;
        
        private const string _xlr2Prefix = "cim";
        
        /// Magnetizing reactance.
        private System.Single? cim_xm;
        
        private const bool isXmMandatory = false;
        
        private const string _xmPrefix = "cim";
        
        /// Transient reactance (unsaturated) (greater than or equal to xpp).
        private System.Single? cim_xp;
        
        private const bool isXpMandatory = false;
        
        private const string _xpPrefix = "cim";
        
        /// Sub-transient reactance (unsaturated) (greather than Xl).
        private System.Single? cim_xpp;
        
        private const bool isXppMandatory = false;
        
        private const string _xppPrefix = "cim";
        
        /// Synchronous reactance (greather than xp).
        private System.Single? cim_xs;
        
        private const bool isXsMandatory = false;
        
        private const string _xsPrefix = "cim";
        
        public virtual float Rr1 {
            get {
                return this.cim_rr1.GetValueOrDefault();
            }
            set {
                this.cim_rr1 = value;
            }
        }
        
        public virtual bool Rr1HasValue {
            get {
                return this.cim_rr1 != null;
            }
        }
        
        public static bool IsRr1Mandatory {
            get {
                return isRr1Mandatory;
            }
        }
        
        public static string Rr1Prefix {
            get {
                return _rr1Prefix;
            }
        }
        
        public virtual float Rr2 {
            get {
                return this.cim_rr2.GetValueOrDefault();
            }
            set {
                this.cim_rr2 = value;
            }
        }
        
        public virtual bool Rr2HasValue {
            get {
                return this.cim_rr2 != null;
            }
        }
        
        public static bool IsRr2Mandatory {
            get {
                return isRr2Mandatory;
            }
        }
        
        public static string Rr2Prefix {
            get {
                return _rr2Prefix;
            }
        }
        
        public virtual float Tpo {
            get {
                return this.cim_tpo.GetValueOrDefault();
            }
            set {
                this.cim_tpo = value;
            }
        }
        
        public virtual bool TpoHasValue {
            get {
                return this.cim_tpo != null;
            }
        }
        
        public static bool IsTpoMandatory {
            get {
                return isTpoMandatory;
            }
        }
        
        public static string TpoPrefix {
            get {
                return _tpoPrefix;
            }
        }
        
        public virtual float Tppo {
            get {
                return this.cim_tppo.GetValueOrDefault();
            }
            set {
                this.cim_tppo = value;
            }
        }
        
        public virtual bool TppoHasValue {
            get {
                return this.cim_tppo != null;
            }
        }
        
        public static bool IsTppoMandatory {
            get {
                return isTppoMandatory;
            }
        }
        
        public static string TppoPrefix {
            get {
                return _tppoPrefix;
            }
        }
        
        public virtual float Xlr1 {
            get {
                return this.cim_xlr1.GetValueOrDefault();
            }
            set {
                this.cim_xlr1 = value;
            }
        }
        
        public virtual bool Xlr1HasValue {
            get {
                return this.cim_xlr1 != null;
            }
        }
        
        public static bool IsXlr1Mandatory {
            get {
                return isXlr1Mandatory;
            }
        }
        
        public static string Xlr1Prefix {
            get {
                return _xlr1Prefix;
            }
        }
        
        public virtual float Xlr2 {
            get {
                return this.cim_xlr2.GetValueOrDefault();
            }
            set {
                this.cim_xlr2 = value;
            }
        }
        
        public virtual bool Xlr2HasValue {
            get {
                return this.cim_xlr2 != null;
            }
        }
        
        public static bool IsXlr2Mandatory {
            get {
                return isXlr2Mandatory;
            }
        }
        
        public static string Xlr2Prefix {
            get {
                return _xlr2Prefix;
            }
        }
        
        public virtual float Xm {
            get {
                return this.cim_xm.GetValueOrDefault();
            }
            set {
                this.cim_xm = value;
            }
        }
        
        public virtual bool XmHasValue {
            get {
                return this.cim_xm != null;
            }
        }
        
        public static bool IsXmMandatory {
            get {
                return isXmMandatory;
            }
        }
        
        public static string XmPrefix {
            get {
                return _xmPrefix;
            }
        }
        
        public virtual float Xp {
            get {
                return this.cim_xp.GetValueOrDefault();
            }
            set {
                this.cim_xp = value;
            }
        }
        
        public virtual bool XpHasValue {
            get {
                return this.cim_xp != null;
            }
        }
        
        public static bool IsXpMandatory {
            get {
                return isXpMandatory;
            }
        }
        
        public static string XpPrefix {
            get {
                return _xpPrefix;
            }
        }
        
        public virtual float Xpp {
            get {
                return this.cim_xpp.GetValueOrDefault();
            }
            set {
                this.cim_xpp = value;
            }
        }
        
        public virtual bool XppHasValue {
            get {
                return this.cim_xpp != null;
            }
        }
        
        public static bool IsXppMandatory {
            get {
                return isXppMandatory;
            }
        }
        
        public static string XppPrefix {
            get {
                return _xppPrefix;
            }
        }
        
        public virtual float Xs {
            get {
                return this.cim_xs.GetValueOrDefault();
            }
            set {
                this.cim_xs = value;
            }
        }
        
        public virtual bool XsHasValue {
            get {
                return this.cim_xs != null;
            }
        }
        
        public static bool IsXsMandatory {
            get {
                return isXsMandatory;
            }
        }
        
        public static string XsPrefix {
            get {
                return _xsPrefix;
            }
        }
    }
}
